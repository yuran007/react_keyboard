{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","pressedKey","setPressedKey","keyupHandler","event","key","useEffect","document","addEventListener","removeEventListener","className","ReactDOM","render","getElementById"],"mappings":"sLAEaA,EAAgB,WAC3B,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAe,SAACC,GACpBF,EAAcE,EAAMC,IACrB,EAUD,OARAC,qBAAU,WAGR,OAFAC,SAASC,iBAAiB,QAASL,GAE5B,WACLI,SAASE,oBAAoB,QAASN,EACvC,CACF,GAAE,IAGD,qBAAKO,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,mBACsB,KAAfT,EAAD,mCAC4BA,EAD5B,KAEA,8BAIX,E,MCpBDU,IAASC,OACP,cAAC,EAAD,IACAL,SAASM,eAAe,Q","file":"static/js/main.d33a6ded.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nexport const App: React.FC = () => {\n  const [pressedKey, setPressedKey] = useState('');\n  const keyupHandler = (event: KeyboardEvent) => {\n    setPressedKey(event.key);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keyup', keyupHandler);\n\n    return () => {\n      document.removeEventListener('keyup', keyupHandler);\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <p className=\"App__message\">\n        {`${(pressedKey !== '')\n          ? `The last pressed key is [${pressedKey}]`\n          : 'Nothing was pressed yet'}`}\n      </p>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}